
import streamlit as st
import pandas as pd
import requests
import google.generativeai as genai
import json
import re
import streamlit.components.v1 as components

st.set_page_config(page_title="Radar Jur√≠dico IA", layout="wide")

st.title("Radar de Not√≠cias Jur√≠dicas sobre IA")
st.subheader("Powered by Google Gemini + Advoco Brasil")

# üîë Carrega chaves dos secrets
NEWS_API_KEY = st.secrets["newsapi_key"]
GEMINI_API_KEY = st.secrets["gemini_key"]

# üîó Configura Google Gemini
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-2.5-flash-preview-05-20')
    st.success("‚úÖ API Gemini configurada com sucesso!")
except Exception as e:
    st.error(f"‚ùå Erro na configura√ß√£o do Gemini: {e}")
    st.stop()

# üîç Fun√ß√£o busca na NewsAPI
def buscar_noticias_newsapi():
    url = "https://newsapi.org/v2/everything"
    params = {
        'q': 'intelig√™ncia artificial AND (advocacia OR direito OR tribunais OR CNJ OR OAB)',
        'from': pd.Timestamp.now() - pd.Timedelta(days=10),
        'sortBy': 'relevancy',
        'language': 'pt',
        'pageSize': 10,
        'apiKey': NEWS_API_KEY
    }
    response = requests.get(url, params=params)
    data = response.json()
    if data.get("status") != "ok":
        raise Exception(data.get("message", "Erro na NewsAPI"))
    return data.get("articles", [])

# üß† Fun√ß√£o processa com Gemini
def processar_com_gemini(artigo):
    prompt = f"""
Voc√™ √© um especialista em direito e tecnologia.

Sua tarefa √© classificar, resumir e categorizar a seguinte not√≠cia, sempre avaliando se ela est√° relacionada diretamente ao uso da Intelig√™ncia Artificial no contexto jur√≠dico brasileiro.

‚ö†Ô∏è Se a not√≠cia N√ÉO for sobre IA aplicada ao direito, ao judici√°rio, √† advocacia, a tribunais ou √† regulamenta√ß√£o no Brasil, descarte.

Se for relevante, siga estes crit√©rios:

1Ô∏è‚É£ Categorize a not√≠cia em UMA das op√ß√µes:
- Implementa√ß√£o de IA em escrit√≥rios de advocacia ou tribunais brasileiros
- Novas legisla√ß√µes e regulamenta√ß√µes sobre IA no direito brasileiro
- Casos de uso bem-sucedidos de IA por advogados no Brasil
- Controv√©rsias ou uso inadequado de IA no ambiente jur√≠dico brasileiro
- Desafios √©ticos da IA na pr√°tica jur√≠dica no Brasil

2Ô∏è‚É£ Crie um resumo objetivo, de at√© 2 linhas, claro e informativo.

3Ô∏è‚É£ Entregue o resultado no formato JSON:
{{
  "data": "{pd.Timestamp(artigo['publishedAt']).strftime('%d/%m/%Y')}",
  "titulo": "{artigo['title']}",
  "fonte": "{artigo['source']['name']}",
  "link": "{artigo['url']}",
  "categoria": "Categoria",
  "resumo": "Resumo objetivo"
}}

‚ö†Ô∏è Se a not√≠cia n√£o for sobre IA no contexto jur√≠dico brasileiro, responda apenas:
{{
  "descartar": "Not√≠cia irrelevante para IA no direito"
}}
"""
    try:
        response = model.generate_content(prompt)
        result = response.text.strip()
        result = re.sub(r"^```json", "", result)
        result = re.sub(r"```$", "", result)
        data = json.loads(result)
        if "descartar" in data:
            return None
        return data
    except Exception as e:
        st.error(f"‚ùå Erro no processamento Gemini: {e}")
        return None

# üé® Fun√ß√£o gerar HTML estilizado
def gerar_html_noticias(lista_noticias):
    html = """
    <div style='font-family: Arial, sans-serif; max-width: 1000px; margin: auto;'>
    """
    for noticia in lista_noticias:
        html += f"""
        <div style='border:1px solid #ddd; border-radius:10px; padding:20px; margin-bottom:15px; box-shadow:0 2px 6px rgba(0,0,0,0.1);'>
          <div style='font-size:14px; color:#666;'>üóìÔ∏è {noticia['data']} | <strong>{noticia['fonte']}</strong> | <span style='color:#0066cc;'>{noticia['categoria']}</span></div>
          <h3 style='margin-top:5px; margin-bottom:10px;'>
            <a href='{noticia['link']}' target='_blank' style='text-decoration:none; color:#003366;'>
              {noticia['titulo']}
            </a>
          </h3>
          <p style='font-size:15px; color:#333;'>
            {noticia['resumo']}
          </p>
        </div>
        """
    html += "</div>"
    return html

# üöÄ Execu√ß√£o
if st.button("üîé Buscar Not√≠cias Reais"):
    with st.spinner("Consultando APIs..."):
        try:
            artigos = buscar_noticias_newsapi()
            resultados = []
            for artigo in artigos:
                processado = processar_com_gemini(artigo)
                if processado:
                    resultados.append(processado)

            if resultados:
                html_resultado = gerar_html_noticias(resultados)
                components.html(html_resultado, height=700 + len(resultados) * 150, scrolling=True)
            else:
                st.warning("Nenhuma not√≠cia relevante encontrada.")

        except Exception as e:
            st.error(f"‚ùå Erro: {e}")
