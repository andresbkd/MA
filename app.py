import streamlit as st
import pandas as pd
import requests
import google.generativeai as genai
import json
import re

st.set_page_config(page_title="Radar Jur√≠dico IA", layout="wide")

st.title("‚öñÔ∏è Radar de Not√≠cias Jur√≠dicas sobre IA")
st.subheader("Powered by Google Gemini + Advoco Brasil")

# üîë Carrega chaves dos secrets
NEWS_API_KEY = st.secrets["newsapi_key"]
GEMINI_API_KEY = st.secrets["gemini_key"]

# üîó Configura Google Gemini
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
    st.success("‚úÖ API Gemini configurada com sucesso!")
except Exception as e:
    st.error(f"‚ùå Erro na configura√ß√£o do Gemini: {e}")
    st.stop()

# üîç Fun√ß√£o busca na NewsAPI
def buscar_noticias_newsapi():
    url = "https://newsapi.org/v2/everything"
    params = {
        'q': 'intelig√™ncia artificial AND (advocacia OR direito OR tribunais OR CNJ OR OAB)',
        'from': pd.Timestamp.now() - pd.Timedelta(days=10),
        'sortBy': 'relevancy',
        'language': 'pt',
        'pageSize': 10,
        'apiKey': NEWS_API_KEY
    }
    response = requests.get(url, params=params)
    data = response.json()
    if data.get("status") != "ok":
        raise Exception(data.get("message", "Erro na NewsAPI"))
    return data.get("articles", [])

# üß† Fun√ß√£o processa com Gemini
def processar_com_gemini(artigo):
    prompt = f"""
Voc√™ √© um analista jur√≠dico. Classifique e resuma a seguinte not√≠cia do contexto jur√≠dico brasileiro sobre intelig√™ncia artificial:

T√≠tulo: {artigo['title']}
Fonte: {artigo['source']['name']}
Descri√ß√£o: {artigo.get('description', '')}
Link: {artigo['url']}

Siga estes crit√©rios:
- Categorize a not√≠cia em uma das op√ß√µes:
  1. Implementa√ß√£o de IA em escrit√≥rios de advocacia e tribunais brasileiros
  2. Novas legisla√ß√µes e regulamenta√ß√µes sobre IA no direito brasileiro
  3. Casos de uso bem-sucedidos de IA por advogados no Brasil
  4. Controv√©rsias ou uso inadequado de IA por profissionais jur√≠dicos brasileiros
  5. Desafios √©ticos da IA na pr√°tica jur√≠dica no contexto do Brasil

Devolva como JSON:
{{
  "data": "{pd.Timestamp(artigo['publishedAt']).strftime('%d/%m/%Y')}",
  "titulo": "{artigo['title']}",
  "fonte": "{artigo['source']['name']}",
  "link": "{artigo['url']}",
  "categoria": "categoria aqui",
  "resumo": "resumo aqui"
}}
"""
    try:
        response = model.generate_content(prompt)
        result = response.text.strip()
        result = re.sub(r"^```json", "", result)
        result = re.sub(r"```$", "", result)
        return json.loads(result)
    except Exception as e:
        st.error(f"‚ùå Erro no processamento Gemini: {e}")
        return None

# üöÄ Execu√ß√£o
if st.button("üîé Buscar Not√≠cias Reais"):
    with st.spinner("Consultando APIs..."):
        try:
            artigos = buscar_noticias_newsapi()
            resultados = []
            for artigo in artigos:
                processado = processar_com_gemini(artigo)
                if processado:
                    resultados.append(processado)

            if resultados:
                df = pd.DataFrame(resultados)
                st.dataframe(df, use_container_width=True)

                st.download_button(
                    label="üíæ Baixar CSV",
                    data=df.to_csv(index=False).encode('utf-8'),
                    file_name='noticias_juridicas_ia.csv',
                    mime='text/csv'
                )
            else:
                st.warning("Nenhuma not√≠cia relevante encontrada.")

        except Exception as e:
            st.error(f"‚ùå Erro: {e}")
